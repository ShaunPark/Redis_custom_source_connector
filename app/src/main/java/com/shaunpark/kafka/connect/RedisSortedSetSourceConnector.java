/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.shaunpark.kafka.connect;

import org.apache.kafka.common.config.ConfigDef;
import org.apache.kafka.common.config.ConfigDef.ConfigKey;
import org.apache.kafka.common.config.ConfigDef.Importance;
import org.apache.kafka.common.config.ConfigDef.Range;
import org.apache.kafka.common.config.ConfigDef.Type;
import org.apache.kafka.common.config.ConfigDef.Validator;
import org.apache.kafka.common.config.ConfigDef.Width;
import org.apache.kafka.connect.connector.Task;
import org.apache.kafka.connect.source.SourceConnector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.shaunpark.kafka.connect.redis.RedisClient;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

/**
 * Very simple source connector that works with stdin or a file.
 */
public class RedisSortedSetSourceConnector extends SourceConnector {

    private static final Logger log = LoggerFactory.getLogger(RedisSortedSetSourceConnector.class);
    public static final String TOPIC_CONFIG = "topic";
    public static final String TASK_BATCH_SIZE_CONFIG = "batch.size";
    public static final String REDIS_HOST_CONFIG = "redis.host";
    public static final String REDIS_PORT_CONFIG = "redis.port";
    public static final String REDIS_KEY_CONFIG = "redis.sortedset.key";
    public static final String POLL_MAX_INTERVAL_MS_CONFIG = "max.poll.interval.ms";

    public static final int DEFAULT_TASK_BATCH_SIZE = 2000;
    public static final int DEFAULT_POLL_INTERVAL = 10000;
    public static final String DEFAULT_REDIS_SERVER_HOST = "localhost";
    public static final int DEFAULT_REDIS_SERVER_PORT = 6379;


    public static final Pattern HOSTNAME_PATTERN = Pattern.compile("^[a-zA-Z0-9-_.]+$");

    private static final String CONFIG_GROUP = "redis";

    public RedisClient client;
    private static int orderId = 0;
    private static ConfigKey createConfigKey(String name, Type type, Object defaultValue, Validator validator, String document, String displayName) {
        return new ConfigKey(name, type, defaultValue, validator,Importance.HIGH, document,  CONFIG_GROUP,  orderId++, Width.NONE, displayName, Collections.emptyList(),null, false);
    }

    static final ConfigDef CONFIG_DEF = new ConfigDef()
        .define(createConfigKey(POLL_MAX_INTERVAL_MS_CONFIG, 
                Type.INT, 
                DEFAULT_POLL_INTERVAL, 
                Range.atLeast(10000),
                "Maximun poll interval in milliseconds, If not specified, '10000' will be used. minium value is '10000'",
                "Poll Interval"))
        .define(createConfigKey(REDIS_HOST_CONFIG, 
                Type.STRING, 
                DEFAULT_REDIS_SERVER_HOST, 
                null, 
                "Redis server hostname, If not specified, 'localhost' will be used", 
                "Redis Server Hostname"
                ))
        .define(createConfigKey(REDIS_PORT_CONFIG, 
                Type.INT, 
                DEFAULT_REDIS_SERVER_PORT, 
                Range.atLeast(1),
                "Redis server port number, If not specified, '6379' will be used",                
                "Redis Server Port Number"))
        .define(createConfigKey(REDIS_KEY_CONFIG,
                Type.STRING, null,
                new ConfigDef.NonEmptyString(), 
                "Key of a sorted key. No default Value",
                "Redis sorted set key"))
        .define(createConfigKey(TOPIC_CONFIG, 
                Type.STRING, 
                ConfigDef.NO_DEFAULT_VALUE, 
                new ConfigDef.NonEmptyString(), 
                "The topic to publish data to",                
                "Topic name to produce"))
        .define(createConfigKey(TASK_BATCH_SIZE_CONFIG, Type.INT, DEFAULT_TASK_BATCH_SIZE,
                Range.atLeast(1),
                "The maximum number of records the source task can read from the redis each time it is polled",            
                "Batch Size"));

    private Map<String, String> properties;
            
    @Override
    public String version() {
        return "0.0.10";
    }

    @Override
    public void start(Map<String, String> props) {
        log.info("RedisSortedSetSourceConnector started.");
        this.properties = Collections.unmodifiableMap(new HashMap<>(props));
    }

    @Override
    public Class<? extends Task> taskClass() {
        return RedisSortedSetSourceTask.class;
    }

    @Override
    public List<Map<String, String>> taskConfigs(int maxTasks) {
        if (maxTasks > 1) {
            throw new IllegalArgumentException("Only a single connector task may be started");
        }
        return Collections.singletonList(properties);
    }

    @Override
    public void stop() {
        // Nothing to do since FileStreamSourceConnector has no background monitoring.
    }

    @Override
    public ConfigDef config() {
        return CONFIG_DEF;
    }
}